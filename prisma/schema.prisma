// Prisma schema for Doxx Me app

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model RedditData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Reddit account info
  redditId       String  @unique
  username       String
  totalKarma     Int     @default(0)
  commentKarma   Int     @default(0)
  linkKarma      Int     @default(0)
  accountAge     String?
  createdUtc     DateTime?
  verified       Boolean @default(false)
  isPremium      Boolean @default(false)
  avatarUrl      String?
  
  // Web proof data - stores raw JSON responses for verification
  rawApiResponse String?    // Raw Reddit API response for proof
  proofTimestamp DateTime @default(now()) // When the proof was generated
  proofHash      String?  // Hash of the proof data for integrity
  
  // User relationship
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Subreddit karma breakdown
  subredditKarma SubredditKarma[]

  @@map("reddit_data")
}

model SubredditKarma {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Subreddit information
  subreddit     String
  commentKarma  Int    @default(0)
  linkKarma     Int    @default(0)
  totalKarma    Int    @default(0)

  // Web proof data for this specific subreddit
  rawKarmaData   String?    // Raw karma API response for this subreddit
  proofTimestamp DateTime @default(now()) // When this subreddit karma was verified
  postExamples   String?    // JSON array of example posts from this subreddit
  commentExamples String?   // JSON array of example comments from this subreddit
  
  // Relationship to Reddit data
  redditDataId String
  redditData   RedditData @relation(fields: [redditDataId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate subreddit entries per user
  @@unique([redditDataId, subreddit])
  @@map("subreddit_karma")
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Verification details
  platform    String // "reddit", "twitter", "github", etc.
  platformId  String // Platform-specific user ID
  username    String
  verifiedAt  DateTime @default(now())
  isActive    Boolean  @default(true)

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Prevent duplicate verifications for the same platform
  @@unique([userId, platform])
  @@map("verifications")
}

model GitHubData {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic GitHub profile
  githubId      String  @unique
  username      String
  name          String?
  email         String?
  bio           String?
  company       String?
  location      String?
  blog          String?
  avatarUrl     String?
  followers     Int     @default(0)
  following     Int     @default(0)
  publicRepos   Int     @default(0)
  accountAge    String?
  createdUtc    DateTime?
  
  // Web proof data - stores raw GraphQL responses for verification
  rawApiResponse String?    // Raw GitHub GraphQL API response for proof
  proofTimestamp DateTime @default(now()) // When the proof was generated
  proofHash      String?  // Hash of the proof data for integrity
  
  // User relationship
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Repository contributions
  repositoryContributions RepositoryContribution[]

  @@map("github_data")
}

model RepositoryContribution {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Repository identification
  repositoryName  String
  repositoryOwner String
  repositoryUrl   String?
  repositoryId    String? // GitHub repository ID for verification
  
  // User-specific contribution metrics for THIS repository
  prsCreated      Int @default(0)
  prsMerged       Int @default(0)
  prsOpen         Int @default(0)
  prsClosed       Int @default(0)
  issuesOpened    Int @default(0)
  issuesClosed    Int @default(0)
  commitsCount    Int @default(0)
  linesAdded      Int @default(0)
  linesDeleted    Int @default(0)
  
  // Web proof data for this specific repository
  rawGraphQLResponse String?    // Raw GraphQL response for this repository
  proofTimestamp DateTime @default(now()) // When this repository data was verified
  contributionExamples String?   // JSON array of example PRs/commits from this repository
  
  // Relationship to GitHub data
  githubDataId String
  githubData   GitHubData @relation(fields: [githubDataId], references: [id], onDelete: Cascade)

  // Unique constraint to prevent duplicate repository entries per user
  @@unique([githubDataId, repositoryName, repositoryOwner])
  @@map("repository_contributions")
}

model VlayerProof {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // vlayer proof identification
  vlayerProofId    String   @unique // ID returned from vlayer API
  url              String   // URL that was proven
  notary           String   // Notary server used
  headers          String?  // JSON array of headers used
  
  // Proof status and results
  status           String   // "pending", "completed", "failed"
  proof            String?  // The actual zkTLS proof when completed
  publicInputs     String?  // JSON string of public inputs
  verificationKey  String?  // Verification key for the proof
  error            String?  // Error message if failed
  
  // Request metadata
  platform         String?  // "reddit", "github", "custom", etc.
  requestTimestamp DateTime @default(now()) // When proof was requested
  completedAt      DateTime? // When proof was completed
  
  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Attestation relationship
  golemAttestations GolemAttestation[]

  @@index([vlayerProofId])
  @@index([userId, platform])
  @@index([status])
  @@map("vlayer_proofs")
}

model GolemAttestation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Golem attestation core fields
  entityKey        String   // The entity key for this attestation
  expirationBlock  BigInt   // Block number when this attestation expires
  issuedAt         DateTime @default(now()) // When the attestation was issued
  
  // Attestation metadata
  platform         String   // "reddit", "github", "zktls", etc.
  attestationType  String   // "karma", "contributions", "profile", "zktls_proof", etc.
  status           String   @default("active") // "active", "expired", "revoked"
  
  // Raw data storage - complete API responses
  rawApiData       String   // JSON string of complete API response
  processedData    String?  // JSON string of processed/normalized data
  proofHash        String?  // Hash of the proof data for integrity verification
  
  // Metadata for verification
  apiEndpoint      String?  // Which API endpoint was called
  requestParams    String?  // JSON string of request parameters used
  responseHeaders  String?  // JSON string of relevant response headers
  
  // zkTLS proof relationship (optional)
  vlayerProofId    String?
  vlayerProof      VlayerProof? @relation(fields: [vlayerProofId], references: [id], onDelete: SetNull)
  
  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for efficient queries
  @@index([entityKey])
  @@index([expirationBlock])
  @@index([platform, attestationType])
  @@index([userId, platform])
  @@index([vlayerProofId])
  @@unique([userId, entityKey, platform]) // Prevent duplicate attestations
  @@map("golem_attestations")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Wallet information
  walletAddress String? @unique

  // Farcaster account information  
  farcasterFid Int? @unique

  // Reddit account information
  redditId       String? @unique
  redditUsername String?
  redditVerified Boolean @default(false)

  // GitHub account information
  githubId       String? @unique
  githubUsername String?
  githubVerified Boolean @default(false)

  // Account verification status
  isVerified Boolean @default(false)

  // Relationships
  redditData        RedditData?
  githubData        GitHubData?
  verifications     Verification[]
  golemAttestations GolemAttestation[]
  vlayerProofs      VlayerProof[]
  
  @@map("users")
}